<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Dahlem_Idle_Down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasTalkedToGandahl = false;
facing = "down";
canShoot = true;

defeatDrDahl = false;
dbCheck1 = false;
dbCheck2 = false;
dbCheck3 = false;
dbCheck4 = false;
defeatKevin = false;
defeatDahlorb = false;
defeatDahlemator = false;
//defeatDahlerino


boughtGlasses = false;


gold = 0;

totalHealth = 60;
currHealth = totalHealth;

damage = 3; //Ranged Damage
meleeDamage = 5; //Melee Damage

draw_set_alpha(0.4);
instance_create(room_width - 39, 15, healthBar);
draw_set_alpha(1);

healthUpdate(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_textbox_intro1</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>4</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>180</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
//Move Left
if ((keyboard_check(ord("A"))) || (keyboard_check(vk_left))) &amp;&amp; (place_free(x - 2, y)) {
    x -= 2;
    sprite_index = spr_Dahlem_Walk_Left;
    image_speed = 1;
    facing = "left";
}

//Move Right
if ((keyboard_check(ord("D"))) || (keyboard_check(vk_right))) &amp;&amp; (place_free(x + 2, y)) {
    x += 2;
    sprite_index = spr_Dahlem_Walk_Right;
    image_speed = 1;
    facing = "right";
}
//Move Up
if ((keyboard_check(ord("W"))) || (keyboard_check(vk_up))) &amp;&amp; (place_free(x, y - 2)) {
    y -= 2;
    sprite_index = spr_Dahlem_Walk_Up;
    image_speed = 1;
    facing = "up";
}
//Move Down
if ((keyboard_check(ord("S"))) || (keyboard_check(vk_down))) &amp;&amp; (place_free(x, y + 2)) {
    y += 2;
    sprite_index = spr_Dahlem_Walk_Down;
    image_speed = 1;
    facing = "down";
}

//Idle
if   !(keyboard_check(ord("A"))) &amp;&amp; !(keyboard_check(vk_left)) &amp;&amp;
     !(keyboard_check(ord("D"))) &amp;&amp; !(keyboard_check(vk_right)) &amp;&amp;
     !(keyboard_check(ord("W"))) &amp;&amp; !(keyboard_check(vk_up)) &amp;&amp;
     !(keyboard_check(ord("S"))) &amp;&amp; !(keyboard_check(vk_down)) {
     if ( facing = "down" ) {
        sprite_index = spr_Dahlem_Idle_Down;
     }
     if ( facing = "up" ) {
        sprite_index = spr_Dahlem_Idle_Up;
     }
     if ( facing = "right" ) {
        sprite_index = spr_Dahlem_Idle_Right;
     }
     if ( facing = "left" ) {
        sprite_index = spr_Dahlem_Idle_Left;
     }
}

if(keyboard_check(ord("E"))) {
    if(canShoot) {
        canShoot = false;
        instance_create(x,y,obj_laser);
        alarm[0]=15;
    }
}


// Check if both Dr Dahl and Kevin are killed
if(dbCheck1 == false) {
if(defeatDrDahl == true &amp;&amp; defeatKevin == true) {
    room_goto(rm_house);
    x = room_width / 2;
    y = room_height / 2;
    currHealth = totalHealth;
    dbCheck1 = true;
    gold+=10;
}}

// Check if Dahlorb is killed
if (dbCheck2 == false) {
if(defeatDahlorb == true) {
    room_goto(rm_house);
    x = 175;
    y = 175;
    dbCheck2 = true;
    gold+=10;
}}

// Check if Dahlemator is killed
if (dbCheck3 == false) {
if(defeatDahlemator == true) {
    room_goto(rm_house);
    x = room_width / 2;
    y = room_height / 2;
    dbCheck3 = true;
    gold+=10;
}
}

// Check if Dahlorb is killed

/*if(defeatDahlorb == true) {
    room_goto(rm_house);
    x = room_width / 2;
    y = rooom_height / 2;
}*/

var prevRoom;

//Collide with Door to West from House
if collision_circle(x, y, 20 , obj_west_door, true, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_west);
    if(prevRoom == "rm_house") {
        x = 170;
        y = 80;
    }
}
if collision_circle(x, y, 20 , obj_gandahl_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_gandahl);
    if(prevRoom == "rm_west") {
        x = 170;
        y = 100;
    }
}
if collision_circle(x, y, 20 , obj_west_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_west);
    if(prevRoom == "rm_gandahl") {
        x = 170;
        y = 250;
    }
}

if collision_circle(x, y, 40 , obj_gandahl, false, true) {
    if(hasTalkedToGandahl == false) {
        hasTalkedToGandahl = true;
        instance_create(4, 225, obj_textbox_gandahl);
    }
}

if collision_circle(x, y, 20 , obj_west_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_west);
    if(prevRoom == "rm_well") {
        x = 280;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_well_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_well);
    if(prevRoom == "rm_west") {
        x = 60;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_north_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_north);
    if(prevRoom == "rm_well") {
        x = 175;
        y = 270;
    }
}

if collision_circle(x, y, 20 , obj_well_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_well);
    if(prevRoom == "rm_north") {
        x = 185;
        y = 100;
    }
}

if collision_circle(x, y, 20 , obj_shop_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_shop);
    if(prevRoom == "rm_north") {
        x = 80;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_east_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_east);
    if(prevRoom == "rm_well") {
        x = 60;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_well_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_well);
    if(prevRoom == "rm_east") {
        x = 280;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_well_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_well);
    if(prevRoom == "rm_south") {
        x = 175;
        y = 280;
    }
}

if collision_circle(x, y, 20 , obj_south_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_south);
    if(prevRoom == "rm_well") {
        x = 175;
        y = 100;
    }
}

if collision_circle(x, y, 20 , obj_resident_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_resident);
    if(prevRoom == "rm_south") {
        x = 60;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_south_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_south);
    if(prevRoom == "rm_resident") {
        x = 280;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_resident_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_resident);
    if(prevRoom == "rm_east") {
        x = 175;
        y = 60;
    }
}

if collision_circle(x, y, 20 , obj_east_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_east);
    if(prevRoom == "rm_resident") {
        x = 175;
        y = 280;
    }
}

if collision_circle(x, y, 20 , obj_east_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_east);
    if(prevRoom == "rm_shop") {
        x = 175;
        y = 90;
    }
}

if collision_circle(x, y, 20 , obj_house_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_house);
    if(prevRoom == "rm_north") {
        x = 280;
        y = 175;
    }
}

if collision_circle(x, y, 20 , obj_north_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_north);
    if(prevRoom == "rm_house") {
        x = 70;
        y = 175;
    }
}
if collision_circle(x, y, 20 , obj_DAHL_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(StartFarm5);
    if(prevRoom == "rm_west") {
        x = room_height / 2;
        y = 180;
    }
}
if collision_circle(x, y, 20 , obj_woods_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(room1);
    if(prevRoom == "rm_west") {
        x = room_height / 2;
        y = 180;
    }
}
if collision_circle(x, y, 20 , obj_dahlightzone_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_A2);
    if(prevRoom == "rm_north") {
        x = room_height / 2;
        y = 280;
    }
}

if collision_circle(x, y, 20 , obj_daliseum_door, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_entrance);
    if(prevRoom == "rm_south") {
        y = 160;
    }
}

//Signs
if collision_circle(x, y, 30 , obj_sign_DAHL, false, true) {
    instance_create(4, 225, obj_sign_DAHL_text);
}
if collision_circle(x, y, 30 , obj_sign_dahliseum, false, true) {
    instance_create(4, 225, obj_sign_dahliseum_text);
}
if collision_circle(x, y, 30 , obj_sign_shop, false, true) {
    instance_create(4, 225, obj_sign_shop_text);
}
if collision_circle(x, y, 30 , obj_sign_woods, false, true) {
    instance_create(4, 225, obj_sign_woods_text);
}
if collision_circle(x, y, 30 , obj_sign_gandahl, false, true) {
    instance_create(4, 225, obj_sign_gandahl_text);
}
if collision_circle(x, y, 30 , obj_sign_resident, false, true) {
    instance_create(4, 225, obj_sign_resident_text);
}
if collision_circle(x, y, 30 , obj_sign_dahlightzone, false, true) {
    instance_create(4, 225, obj_sign_dahlightzone_text);
}
if collision_circle(x, y, 30 , obj_sign_dahlhouse, false, true) {
    instance_create(4, 225, obj_sign_dahlhouse_text);
}

//Items in Shops
if collision_circle(x, y, 20 , obj_sunglasses, false, true) {
    instance_create(4, 225, obj_sunglasses_text);
}
if collision_circle(x, y, 20 , obj_keyboard, false, true) {
    instance_create(4, 225, obj_keyboard_text);
}
if collision_circle(x, y, 20 , obj_sushi, false, true) {
    instance_create(4, 225, obj_sushi_text);    
}


//YEAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH TYLER

if collision_circle(x,y,15,gate_to_3,false,true){ 
    prevRoom = room_get_name(room);
    room_goto(FarmmiddleLeft);
    if(prevRoom == "FarmCenter") {
        x =256;
        y = 64;
    }  
    if(prevRoom == "FarmtopLeft") {
        x =128;
        y = 32;
    }
        if(prevRoom == "FarmbottomLeft") {
        x =128;
        y = 228;
    }
}
if collision_circle(x,y,15,gateto0,false,true){ 
    room_goto(FarmtopLeft);
    x =128;
    y = 288;
}
if collision_circle(x,y,15,gateto4,false,true){ 
     prevRoom = room_get_name(room);
    room_goto(FarmCenter);
    if(prevRoom == "FarmbottomMiddle") {
        x =128;
        y = 256;
    } 
    if(prevRoom == "FarmmiddleLeft") {
        x =32;
        y = 160;
    } 
}
if collision_circle(x,y,15,gateto6,false,true){ 
     prevRoom = room_get_name(room);
    room_goto(FarmbottomLeft);
    if(prevRoom == "FarmmiddleLeft") {
        x =160;
        y = 32;
    } 
    if(prevRoom == "FarmbottomMiddle") {
        x =288;
        y = 128;
    } 
}
if collision_circle(x,y,15,gateto2,false,true){ 
    room_goto(FarmtopRight);
    x =96;
    y = 160;
}
if collision_circle(x,y,15,gateto1,false,true){ 
    room_goto(FarmtopMiddle);
    x =100;
    y = 100;
}
if collision_circle(x,y,15,gateto7,false,true){ 
    prevRoom = room_get_name(room);
    room_goto(FarmbottomMiddle);
    if(prevRoom == "FarmCenter") {
        x =160;
        y = 32;
    }
    if(prevRoom == "FarmbottomLeft"){
    x = 32;
    y = 160;
    }
    if(prevRoom == "FarmbottomRight"){
    x = 256;
    y = 160;
    }
}
if collision_circle(x,y,15,gateto8,false,true){
 prevRoom = room_get_name(room);
    room_goto(FarmbottomRight);
    if(prevRoom == "FarmbottomMiddle") {
        x =32;
        y = 96;
    }  
    if(prevRoom == "StartFarm5") {
        x =160;
        y = 32;
    } 
}
if collision_circle(x,y,15,gateto5,false,true){ 
    room_goto(StartFarm5);
    x =100;
    y = 100;
}

// AYYYYYY ITS KYLE

if collision_circle(x,y,15,Gate_R1,false,true){ 
    room_goto(room1);
    x =100;
    y = 250;
}
if collision_circle(x,y,15,Gate_R2,false,true){ 
    room_goto(room2);
    x =100;
    y = 100;
}
if collision_circle(x,y,15,Gate_R3,false,true){ 
    room_goto(room3);
    x =150;
    y = 250;
}
if collision_circle(x,y,15,Gate_R4,false,true){ 
    room_goto(room4);
    x =100;
    y = 50;
}
if collision_circle(x,y,15,Gate_R5,false,true){ 
    room_goto(room5);
    x =100;
    y = 50;
}
if collision_circle(x,y,15,Gate_R6,false,true){ 
    room_goto(room6);
    x =100;
    y = 250;
}
if collision_circle(x,y,15,Gate_R7,false,true){ 
    room_goto(room7);
    x =25;
    y = 100;
}
if collision_circle(x,y,15,Gate_R8,false,true){ 
    room_goto(room8);
    x =50;
    y = 100;
}
if collision_circle(x,y,15,Gate_R9,false,true){ 
    room_goto(room9);
    x =100;
    y = 100;
}

//AYY ITS YA BOY GREGORY
if collision_circle(x,y,15,obj_pitfall,false,true) {
    game_end(); 
}
if collision_circle(x,y,15,obj_A2W,false,true) {
    room_goto(rm_A1); 
    x=310;
    y=120;
}
if collision_circle(x,y,15,obj_A1E,false,true) {
    room_goto(rm_A2); 
    x=32;
    y=120;
}
if collision_circle(x,y,15,obj_A1N,false,true) {
    room_goto(rm_B1); 
    x=120;
    y=310;
}
if collision_circle(x,y,15,obj_B1S,false,true) {
    room_goto(rm_A1); 
    x=128;
    y=32;
}
if collision_circle(x,y,15,obj_B1E,false,true) {
    room_goto(rm_B2); 
    x=32;
    y=160;
}
if collision_circle(x,y,15,obj_B2W,false,true) {
    room_goto(rm_B1); 
    x=288;
    y=160;
}
if collision_circle(x,y,15,obj_B2N,false,true) {
    room_goto(rm_C2); 
    x=192;
    y=288;
}
if collision_circle(x,y,15,obj_C2S,false,true) {
    room_goto(rm_B2); 
    x=200;
    y=32;
}
if collision_circle(x,y,15,obj_C2W,false,true) {
    room_goto(rm_C1); 
    x=288;
    y=160;
}
if collision_circle(x,y,15,obj_C2E,false,true) {
    room_goto(rm_C3); 
    x=32;
    y=160;
}
if collision_circle(x,y,15,obj_C1E,false,true) {
    room_goto(rm_C2); 
    x=32;
    y=160;
}
if collision_circle(x,y,15,obj_C3W,false,true) {
    room_goto(rm_C2); 
    x=288;
    y=160;
}
if collision_circle(x,y,15,obj_C3S,false,true) {
    room_goto(rm_B3); 
    x=185;
    y=42;
}
if collision_circle(x,y,20,obj_B3N,false,true) {
    room_goto(rm_C3); 
    x=180;
    y=300;
}
if collision_circle(x,y,15,obj_B3S,false,true) {
    room_goto(rm_A3); 
    x=160;
    y=80;
}

//IT'S A ME, THOMAS!

if collision_circle(x,y,20,obj_spikes,false,true) {
    game_end();
}
if collision_circle(x, y, 40 , obj_topleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_topleft);
    if(prevRoom == "rm_dahliseum_entrance") {
        x = 275;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_entrance, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_entrance);
    if(prevRoom == "rm_dahliseum_topleft") {
        x = 80;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_topleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_topleft);
    if(prevRoom == "rm_dahliseum_midleft") {
        x = 175;
        y = 280;
    }
}
if collision_circle(x, y, 40 , obj_midleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_midleft);
    if(prevRoom == "rm_dahliseum_topleft") {
        x = 175;
        y = 80;
    }
}
if collision_circle(x, y, 40 , obj_midleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_midleft);
    if(prevRoom == "rm_dahliseum_botleft") {
        x = 175;
        y = 280;
    }
}
if collision_circle(x, y, 40 , obj_botleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botleft);
    if(prevRoom == "rm_dahliseum_midleft") {
        x = 175;
        y = 60;
    }
}
if collision_circle(x, y, 40 , obj_botleft, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botleft);
    if(prevRoom == "rm_dahliseum_botmid") {
        x = 280;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_botmid, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botmid);
    if(prevRoom == "rm_dahliseum_botleft") {
        x = 60;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_botmid, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botmid);
    if(prevRoom == "rm_dahliseum_botright") {
        x = 280;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_botmid, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botmid);
    if(prevRoom == "rm_dahliseum_mid") {
        x = 176;
        y = 60;
    }
}
if collision_circle(x, y, 40 , obj_botright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botright);
    if(prevRoom == "rm_dahliseum_botmid") {
        x = 60;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_botright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_botright);
    if(prevRoom == "rm_dahliseum_midright") {
        x = 175;
        y = 60;
    }
}
if collision_circle(x, y, 40 , obj_midright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_midright);
    if(prevRoom == "rm_dahliseum_botright") {
        x = 175;
        y = 290;
    }
}
if collision_circle(x, y, 40 , obj_midright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_midright);
    if(prevRoom == "rm_dahliseum_topright") {
        x = 175;
        y = 60;
    }
}
if collision_circle(x, y, 40 , obj_topright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_topright);
    if(prevRoom == "rm_dahliseum_midright") {
        x = 175;
        y = 290;
    }
}
if collision_circle(x, y, 40 , obj_topright, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_topright);
    if(prevRoom == "rm_dahliseum_entrance") {
        x = 60;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_entrance, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_entrance);
    if(prevRoom == "rm_dahliseum_topright") {
        x = 290;
        y = 175;
    }
}
if collision_circle(x, y, 40 , obj_mid, false, true) {
    prevRoom = room_get_name(room);
    room_goto(rm_dahliseum_mid);
    if(prevRoom == "rm_dahliseum_botmid") {
        x = 176;
        y = 270;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_orb">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>healthUpdate(obj_orb.damage);
with(obj_orb) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
